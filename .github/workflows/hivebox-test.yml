name: HiveBox CI

on:
  push:
    branches:
      - 'release/*'
      - 'testing/*'
      - 'feature/*'
      - 'dev'
    tags:
      - 'v*.*.*'  
    paths-ignore:
      - README.md

  pull_request:
    branches:
      - 'main'
    paths-ignore:
      - README.md

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go and lint
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest    

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag/branch
        id: extract_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF##refs/tags/}  
          else
            VERSION="dev-${GITHUB_SHA}"  
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=VERSION::$VERSION"

      - name: Build Docker Image
        run: |
          echo "Building Docker image with version $VERSION"
          docker build -f Dockerfile -t "hivebox:$VERSION" .

      - name: Save Docker Image as Artifact
        run: |
          echo "Saving Docker image as artifact"
          docker save "hivebox:$VERSION" -o "hivebox_$VERSION.tar"

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: hivebox-image-${{ steps.extract_version.outputs.VERSION }}
          path: "hivebox_${{ steps.extract_version.outputs.VERSION }}.tar"

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: hivebox-image-${{ needs.build.outputs.VERSION }}

      - name: Load Docker Image
        run: docker load -i "hivebox_${{ needs.build.outputs.VERSION }}.tar"

      - name: Run unit tests
        run: go test ./... -v

      - name: Test /version endpoint
        env:
          VERSION: ${{ needs.build.outputs.VERSION }}
        run: |
          docker run -d -p 8080:8080 "hivebox:$VERSION"

          TIMEOUT=300
          TIME_ELAPSED=0

          until curl -s http://localhost:8080/version; do
            if [ $TIME_ELAPSED -ge $TIMEOUT ]; then
              echo "[ERROR] Timeout reached after $TIMEOUT seconds, stopping the pipeline..."
              exit 1
            fi

            echo "[INFO] Waiting for hivebox container..."
            sleep 5
            TIME_ELAPSED=$((TIME_ELAPSED + 5))

          done

          echo "[OK] /version test has been completed successfully"